#!/usr/bin/python
# -*- coding: utf-8 -*-

"""
    A tool to list and modify webengine's user accounts.
"""

import os
import sys
import getpass
import datetime
import optparse

sys.path.append("/usr/share/webengine/app/")
sys.path.append("/usr/share/webengine/app/webengine/")

os.environ["DJANGO_SETTINGS_MODULE"] = "webengine.settings"

from django.conf import settings
from django.core.exceptions import ObjectDoesNotExist

VERSION = "0.2.0"


def main():
    """Main function."""

    parser = optparse.OptionParser(
        version="%prog " + VERSION,
        option_list=[
            optparse.Option(
                "-a", "--add", dest="add", help="add the given user", metavar="username"
            ),
            optparse.Option(
                "-p",
                "--passwd",
                dest="passwd",
                help="change password of given user",
                metavar="username",
            ),
            optparse.Option(
                "-r",
                "--remove",
                dest="remove",
                help="remove the given user",
                metavar="username",
            ),
            optparse.Option(
                "-l",
                "--list",
                dest="list",
                help="list users",
                action="store_true",
                default=False,
            ),
        ],
    )

    db_group = optparse.OptionGroup(
        parser,
        "WebEngine Database Options",
        "Note: *ALL* these options must be used together if you wish to "
        "change the default database connection settings.",
    )
    db_group.add_option(
        "-N", "--db-name", dest="db_name", help="database name", default=None
    )
    db_group.add_option(
        "-U", "--db-user", dest="db_user", help="database user", default=None
    )
    db_group.add_option(
        "-W",
        "--db-password",
        dest="db_password",
        help="database password",
        default=None,
    )
    db_group.add_option(
        "-H", "--db-host", dest="db_host", help="database host", default=None
    )
    db_group.add_option(
        "-P", "--db-port", dest="db_port", help="database port", default=None
    )
    parser.add_option_group(db_group)

    (options, _args) = parser.parse_args()

    if (
        options.db_name
        and options.db_user
        and options.db_password
        and options.db_host
        and options.db_port
    ):
        settings.configure(
            DATABASE_ENGINE="postgresql_psycopg2",
            DATABASE_NAME=options.db_name,
            DATABASE_USER=options.db_user,
            DATABASE_PASSWORD=options.db_password,
            DATABASE_HOST=options.db_host,
            DATABASE_PORT=options.db_port,
        )
    elif (
        options.db_name
        or options.db_user
        or options.db_password
        or options.db_host
        or options.db_port
    ):
        print("Must set *ALL* database-related options. See --help for more info.")
        sys.exit(2)

    # Uses django settings, must be imported after eventual call to
    # settings.configure()
    from django.contrib.auth.models import User

    if options.list:
        for user in User.objects.all():
            extra = []
            if user.is_staff:
                extra.append("staff")
            if user.is_superuser:
                extra.append("superuser")
            print(
                "%2d. %8s %s <%s> (%s)"
                % (
                    user.id,
                    user.username,
                    user.get_full_name(),
                    user.email,
                    ", ".join(extra),
                )
            )
    elif options.remove:
        try:
            user = User.objects.get(username=options.remove)
        except ObjectDoesNotExist:
            print("User", options.remove, "does not exist")
            sys.exit(1)

        print("Removing", user.username)
        user.delete()
    elif options.add:

        user = User()
        user.username = options.add
        try:
            user.first_name = raw_input("First name: ")
            user.last_name = raw_input("Last name: ")
            user.email = raw_input("Email: ")
            user.date_joined = datetime.datetime.now()
            passwd = getpass.getpass()
            passwd2 = getpass.getpass("Type your password again: ")

            if passwd != passwd2:
                print("Password mismatch, exiting…")
                del user
                sys.exit(1)

            user.set_password(passwd)
            user.save()

        except KeyboardInterrupt:
            print("Creation Aborted")

    elif options.passwd:

        try:
            user = User.objects.get(username=options.passwd)
        except ObjectDoesNotExist:
            print("User", options.passwd, "does not exist")
            sys.exit(1)

        try:
            passwd = getpass.getpass("New password: ")
            passwd2 = getpass.getpass("Type your new password again: ")

            if passwd != passwd2:
                print("Password mismatch, exiting…")
                del user
                sys.exit(1)

            user.set_password(passwd)
            user.save()
        except KeyboardInterrupt:
            print("Password change aborted")


if __name__ == "__main__":
    main()
