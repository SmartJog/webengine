import sjconf


class Plugin(sjconf.PluginWithTemplate):

    VERSION = "@VERSION@"

    def template_path(self, file_path, confs_to_test):
        return (
            self.sjconf.etc_dir + "/webengine/sjconf/templates/webengine/webengine.conf"
        )

    def conf_types(self):
        return (
            ("webengine", "authorized_mods", "list"),
            ("webengine", "enable_admin", "bool"),
            ("webengine", "debug", "bool"),
            ("webengine", "enable_i18n", "bool"),
            ("webengine", "enable_auth", "bool"),
            ("webengine", "enable_auth_generic_ssl", "bool"),
            ("webengine", "enable_auth_ldap", "bool"),
        )

    def conf_files_path(self):
        return (self.sjconf.etc_dir + "/webengine/webengine-conf.conf",)

    def services_to_restart(self):
        return ("apache2",)

    def template_conf(self, file_path):
        conf = self.conf_section_class()(self.conf["webengine"])
        for section in self.conf:
            if section.startswith("webengine:"):
                conf.update(
                    dict(
                        ("%s_%s" % (section[10:], key), value)
                        for key, value in self.conf[section].items()
                    )
                )
        return conf

    class ConfSection(sjconf.Conf.ConfSection):
        def __getitem__(self, key):
            value = sjconf.Conf.ConfSection.__getitem__(self, key)

            if key == "authorized_mods_list":
                return ", ".join(value)
            elif key in (
                "enable_admin_bool",
                "debug_bool",
                "enable_i18n_bool",
                "enable_auth_bool",
                "enable_auth_generic_ssl_bool",
                "enable_auth_ldap_bool",
            ):
                # sjconf will convert one_shot_dcp to a boolean thanks to the “conf_types” method
                value = sjconf.Conf.ConfSection.__getitem__(self, key)
                # We now need to convert it to our own conf file format
                if value:
                    value = "True"
                else:
                    value = "False"
                return value
            else:
                return value
